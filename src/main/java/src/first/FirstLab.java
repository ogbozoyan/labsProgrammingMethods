package src.first;

import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @author ogbozoyan
 * @date 05.03.2023
 */
/*
Task:
Задача: реализовать контейнер-адаптер priority_queue. Принцип работы очереди: первым извлекается наибольший элемент.
Контейнер должен обеспечивать логарифмическое время работы для добавления и удаления элемента.
Рассматриваемые вопросы:
– использование композиции;
– паттерн проектирования «Адаптер»;
– шаблоны с параметрами по умолчанию;
Указания по выполнению:
– лабораторная работа состоит из двух файлов:
priority-queue.h – описание класса priority_queue, прототипы методов,
реализация методов;
test-queue.cpp – тестирование и проверка возможностей класса;
2
– класс priority_queue содержит два шаблонных параметра: хранимый тип данных, используемый контейнер (по умолчанию
динамический массив стандартной библиотеки)
– класс priority_queue содержит одно поле — используемый контейнер; – хранение элементов организовать в виде двоичной
кучи (пирамиды);
– для определения приоритета элемента пользоваться оператором< или
эквивалентным методом (compareTo и т.п.);
– класс должен содержать следующие методы: проверка очереди на пустоту;
получение числа элементов в очереди; добавление элемента в очередь; удаление элемента из очереди; доступ
к максимальному элементу очереди;
 */
@Data
@NoArgsConstructor
public class FirstLab {

    public static void main(String[] args) {
        PriorityQue<Integer> pq = new PriorityQue<>();
        pq.add(2);
        pq.add(3);
        pq.add(1);
        pq.add(4);
        pq.add(5);
        System.out.println(pq);
        pq.del();
        pq.del();
        System.out.println(pq);
    }
}
package src.second;

import java.util.Scanner;

/**
 * @author ogbozoyan
 * @date 06.03.2023
 */
/*
Задача: реализовать ассоциативный массив (контейнер map) на основе двоичного дерева поиска (красно-черного или AVL).
Каждый узел двоичного дерева должен содержать пару ключ-значение. Пользователь должен иметь возможность:
получить значение по ключу, изменить значение по ключу, добавить в контейнер новую пару.
Рассматриваемые вопросы:
– двоичное дерево поиска, красно-черное дерево, AVL-дерево; – паттерн проектирования «Итератор»;
Указания по выполнению:
– лабораторная работа состоит из двух файлов:
map.h – описание класса map, прототипы методов, реализация методов; test-map.cpp – тестирование
и проверка возможностей класса;
– создать вспомогательную шаблонную структуру node, содержащую поле
для хранения значения произвольного типа и 3 поля для хранения указателей на родителя и левого/правого потомков;
– создать шаблонный класс comparator – функтор, который принимает два аргумента произвольного типа,
возвращает логическое значение: true, если первый аргумент меньше; false в противном случае. Реализация данного
класса может быть опущена при отсутствии языковой поддержки;
– класс map содержит три шаблонных параметра: тип ключа; тип значения; тип критерия сравнения (по умолчанию comparator);
– каждый узел дерева в поле данных содержит пару ключ-значение;
– класс map содержит одно поле – указатель на узел, являющийся корнем дерева.
– класс map должен содержать следующие методы: конструктор, деструктор;
конструктор копирования;
копирующий оператор присваивания;
проверка на пустоту;
удаление всех элементов;
добавление пары ключ-значение;
оператор[ ] или соотв. метод – получает ключ, возвращает ссылку на значение;
поиск по ключу – возвращает логическое значение или итератор;
– при необходимости разделять методы на интерфейс и реализацию; Дополнительные задания:
– реализовать поддержку итераторов;
– реализовать методы удаления элемента по итератору и по ключу;
 */
public class SecondLab {
    public static void main(String[] args) {
    MapImpl<Integer,Integer> pr = new MapImpl<>();
        pr.add(10,10);
        pr.add(11,11);

    }
}

